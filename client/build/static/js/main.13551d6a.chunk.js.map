{"version":3,"sources":["api/index.js","common/jsTPS.js","transactions/MoveItem_Transaction.js","transactions/UpdateItem_Transaction.js","store/index.js","components/ErrorScreen.js","auth/index.js","components/SignInSide.js","components/EditToolbar.js","components/AppBanner.js","components/DeleteModal.js","components/ListCard.js","components/HomeScreen.js","components/SplashScreen.js","components/HomeWrapper.js","components/Copyright.js","components/RegisterScreen.js","components/Statusbar.js","components/Top5Item.js","components/WorkspaceScreen.js","App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","withCredentials","api","create","baseURL","apis","createTop5List","payload","post","getAllTop5Lists","get","getTop5ListPairs","updateTop5ListById","id","put","deleteTop5ListById","delete","getTop5ListById","getLoggedIn","registerUser","loginUser","logoutUser","jsTPS","this","transactions","numTransactions","mostRecentTransaction","performingDo","performingUndo","length","getSize","transaction","i","splice","doTransaction","hasTransactionToRedo","hasTransactionToUndo","undoTransaction","text","toString","MoveItem_Transaction","initStore","initOldIndex","initNewIndex","store","oldItemIndex","newItemIndex","moveItem","jsTPS_Transaction","UpdateItem_Transaction","initIndex","initOldText","initNewText","index","oldText","newText","updateItem","GlobalStoreContext","createContext","GlobalStoreActionType","tps","GlobalStoreContextProvider","props","useState","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","setStore","history","useHistory","auth","useContext","AuthContext","storeReducer","action","type","isListNameEditActive","isItemEditActive","changeListName","newName","a","response","data","success","updateList","top5List","_id","getListPairs","pairsArray","name","closeCurrentList","clearAllTransactions","push","createNewList","newListName","items","ownerEmail","user","email","newList","console","log","loadIdNamePairs","markListForDeletion","deleteList","listToDelete","deleteMarkedList","unmarkListForDeletion","setCurrentList","addMoveItemTransaction","start","end","addTransaction","addUpdateItemTransaction","temp","updateCurrentList","newItem","undo","redo","canUndo","canRedo","setIsListNameEditActive","setIsItemEditActive","Provider","value","children","style","width","bgcolor","border","p","px","pb","ErrorModal","Modal","open","error","onClose","display","alignItems","justifyContent","Box","sx","Alert","severity","error_message","Button","onClick","handleClose","AuthActionType","AuthContextProvider","loggedIn","setAuth","useEffect","authReducer","msg","userData","errorMessage","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","theme","createTheme","SignInSide","ThemeProvider","Grid","container","component","height","CssBaseline","item","xs","sm","md","backgroundImage","backgroundRepeat","backgroundColor","t","palette","mode","grey","backgroundSize","backgroundPosition","Paper","elevation","square","my","mx","flexDirection","Avatar","m","noValidate","onSubmit","event","preventDefault","FormData","currentTarget","password","mt","TextField","margin","required","fullWidth","label","autoComplete","autoFocus","FormControlLabel","control","Checkbox","mb","EditToolbar","editStatus","disabled","AppBanner","anchorEl","setAnchorEl","isMenuOpen","Boolean","handleMenuClose","menuId","loggedOutMenu","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","MenuItem","to","loggedInMenu","editToolbar","menu","flexGrow","AppBar","position","Toolbar","noWrap","textDecoration","IconButton","size","edge","lastName","firstName","DeleteModal","ListCard","editActive","setEditActive","setText","idNamePair","toggleEdit","newActive","stopPropagation","cardStatus","cardElement","ListItem","marginTop","button","target","handleLoadList","fontSize","handleDeleteList","className","onKeyPress","code","substring","onChange","defaultValue","inputProps","InputLabelProps","HomeScreen","listCard","List","left","map","pair","selected","Fab","SplashScreen","HomeWrapper","RegisterScreen","Container","maxWidth","formData","passwordVerify","spacing","Statusbar","Top5Item","draggedTo","setDraggedTo","itemClass","ItemElement","onDragStart","targetId","dataTransfer","setData","handleDragStart","onDragOver","handleDragOver","onDragEnter","handleDragEnter","onDragLeave","handleDragLeave","onDrop","sourceId","getData","indexOf","handleDrop","draggable","key","WorkspaceScreen","window","location","editItems","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13551d6a.chunk.js","sourcesContent":["/*\n    This is our http api, which we use to send requests to\n    our back-end API. Note we`re using the Axios library\n    for doing this, which is an easy to use AJAX-based\n    library. We could (and maybe should) use Fetch, which\n    is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it`s a Promise-\n    based API which helps a lot with asynchronous communication.\n    \n    @author McKilla Gorilla\n*/\n\nimport axios from 'axios'\naxios.defaults.withCredentials = true;\nconst api = axios.create({\n    baseURL: '/api',\n})\n\n// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /top5list). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE CALL THE payload, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\nexport const createTop5List = (payload) => api.post(`/top5list/`, payload)\nexport const getAllTop5Lists = () => api.get(`/top5lists/`)\nexport const getTop5ListPairs = () => api.get(`/top5listpairs/`)\nexport const updateTop5ListById = (id, payload) => api.put(`/top5list/${id}`, payload)\nexport const deleteTop5ListById = (id) => api.delete(`/top5list/${id}`)\nexport const getTop5ListById = (id) => api.get(`/top5list/${id}`)\n\nexport const getLoggedIn = () => api.get(`/loggedIn/`);\nexport const registerUser = (payload) => api.post(`/register/`, payload)\nexport const loginUser = (payload) => api.post(`/login/`, payload)\nexport const logoutUser = () => api.get(`/logout/`)\n\nconst apis = {\n    createTop5List,\n    getAllTop5Lists,\n    getTop5ListPairs,\n    updateTop5ListById,\n    deleteTop5ListById,\n    getTop5ListById,\n\n    getLoggedIn,\n    registerUser,\n    loginUser,\n    logoutUser\n}\n\nexport default apis\n","/**\n * jsTPS_Transaction\n * \n * This provides the basic structure for a transaction class. Note to use\n * jsTPS one should create objects that define these two methods, doTransaction\n * and undoTransaction, which will update the application state accordingly.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 1.0\n */\nexport class jsTPS_Transaction {\n    /**\n     * This method is called by jTPS when a transaction is executed.\n     */\n    doTransaction() {\n        console.log(\"doTransaction - MISSING IMPLEMENTATION\");\n    }\n    \n    /**\n     * This method is called by jTPS when a transaction is undone.\n     */\n    undoTransaction() {\n        console.log(\"undoTransaction - MISSING IMPLEMENTATION\");\n    }\n}\n\n/**\n * jsTPS\n * \n * This class serves as the Transaction Processing System. Note that it manages\n * a stack of jsTPS_Transaction objects, each of which know how to do or undo\n * state changes for the given application. Note that this TPS is not platform\n * specific as it is programmed in raw JavaScript.\n */\nexport default class jsTPS {\n    constructor() {\n        // THE TRANSACTION STACK\n        this.transactions = [];\n\n        // THE TOTAL NUMBER OF TRANSACTIONS ON THE STACK,\n        // INCLUDING THOSE THAT MAY HAVE ALREADY BEEN UNDONE\n        this.numTransactions = 0;\n\n        // THE INDEX OF THE MOST RECENT TRANSACTION, NOTE THAT\n        // THIS MAY BE IN THE MIDDLE OF THE TRANSACTION STACK\n        // IF SOME TRANSACTIONS ON THE STACK HAVE BEEN UNDONE\n        // AND STILL COULD BE REDONE.\n        this.mostRecentTransaction = -1;\n\n        // THESE STATE VARIABLES ARE TURNED ON AND OFF WHILE\n        // TRANSACTIONS ARE DOING THEIR WORK SO AS TO HELP\n        // MANAGE CONCURRENT UPDATES\n        this.performingDo = false;\n        this.performingUndo = false;\n    }\n\n    /**\n     * isPerformingDo\n     * \n     * Accessor method for getting a boolean representing whether or not\n     * a transaction is currently in the midst of a do/redo operation.\n     */\n    isPerformingDo() {\n        return this.performingDo;\n    }\n\n    /**\n     * isPerformingUndo\n     * \n     * Accessor method for getting a boolean representing whether or not\n     * a transaction is currently in the midst of an undo operation.\n     */\n    isPerformingUndo() {\n        return this.performingUndo;\n    }\n\n    /**\n     * getSize\n     * \n     * Accessor method for getting the number of transactions on the stack.\n     */\n    getSize() {\n        return this.transactions.length;\n    }\n\n    /**\n     * getRedoSize\n     * \n     * Method for getting the total number of transactions on the stack\n     * that can possibly be redone.\n     */\n    getRedoSize() {\n        return this.getSize() - this.mostRecentTransaction - 1;\n    }\n\n    /**\n     * getUndoSize\n     * \n     * Method for getting the total number of transactions on the stack\n     * that can possible be undone.\n     */\n    getUndoSize() {\n        return this.mostRecentTransaction + 1;\n    }\n\n    /**\n     * hasTransactionToRedo\n     * \n     * Method for getting a boolean representing whether or not\n     * there are transactions on the stack that can be redone.\n     */\n    hasTransactionToRedo() {\n        return (this.mostRecentTransaction+1) < this.numTransactions;\n    }\n\n    /**\n     * hasTransactionToUndo\n     * \n     * Method for getting a boolean representing whehter or not\n     * there are transactions on the stack that can be undone.\n     */\n    hasTransactionToUndo() {\n        return this.mostRecentTransaction >= 0;\n    }\n\n    /**\n     * addTransaction\n     * \n     * Method for adding a transaction to the TPS stack, note it\n     * also then does the transaction.\n     * \n     * @param {jsTPS_Transaction} transaction Transaction to add to the stack and do.\n     */\n    addTransaction(transaction) {\n        // ARE WE BRANCHING?\n        if ((this.mostRecentTransaction < 0) \n            || (this.mostRecentTransaction < (this.transactions.length - 1))) {\n                for (let i = this.transactions.length - 1; i > this.mostRecentTransaction; i--) {\n                    this.transactions.splice(i, 1);\n                }\n                this.numTransactions = this.mostRecentTransaction + 2;\n        }\n        else {\n            this.numTransactions++;\n        }\n\n        // ADD THE TRANSACTION\n        this.transactions[this.mostRecentTransaction+1] = transaction;\n\n        // AND EXECUTE IT\n        this.doTransaction();\n    }\n\n    /**\n     * doTransaction\n     * \n     * Does the current transaction on the stack and advances the transaction\n     * counter. Note this function may be invoked as a result of either adding\n     * a transaction (which also does it), or redoing a transaction.\n     */\n    doTransaction() {\n        if (this.hasTransactionToRedo()) {\n            this.performingDo = true;\n            let transaction = this.transactions[this.mostRecentTransaction+1];\n            transaction.doTransaction();\n            this.mostRecentTransaction++;\n            this.performingDo = false;\n        }\n    }\n\n    /**\n     * This function gets the most recently executed transaction on the \n     * TPS stack and undoes it, moving the TPS counter accordingly.\n     */\n    undoTransaction() {\n        if (this.hasTransactionToUndo()) {\n            this.performingUndo = true;\n            let transaction = this.transactions[this.mostRecentTransaction];\n            transaction.undoTransaction();\n            this.mostRecentTransaction--;\n            this.performingUndo = false;\n        }\n    }\n\n    /**\n     * clearAllTransactions\n     * \n     * Removes all the transactions from the TPS, leaving it with none.\n     */\n    clearAllTransactions() {\n        // REMOVE ALL THE TRANSACTIONS\n        this.transactions = [];\n        \n        // MAKE SURE TO RESET THE LOCATION OF THE\n        // TOP OF THE TPS STACK TOO\n        this.mostRecentTransaction = -1;      \n        this.numTransactions = 0; \n    }\n\n    /**\n     * toString\n     * \n     * Builds and returns a textual represention of the full TPS and its stack.\n     */\n    toString() {        \n        let text = \"--Number of Transactions: \" + this.numTransactions + \"\\n\";\n        text += \"--Current Index on Stack: \" + this.mostRecentTransaction + \"\\n\";\n        text += \"--Current Transaction Stack:\\n\";\n        for (let i = 0; i <= this.mostRecentTransaction; i++) {\n            let jT = this.transactions[i];\n            text += \"----\" + jT.toString() + \"\\n\";\n        }\n        return text;        \n    }\n}","import jsTPS_Transaction from \"../common/jsTPS.js\"\n/**\n * MoveItem_Transaction\n * \n * This class represents a transaction that works with drag\n * and drop. It will be managed by the transaction stack.\n    \n    @author McKilla Gorilla\n */\nexport default class MoveItem_Transaction extends jsTPS_Transaction {\n    constructor(initStore, initOldIndex, initNewIndex) {\n        super();\n        this.store = initStore;\n        this.oldItemIndex = initOldIndex;\n        this.newItemIndex = initNewIndex;\n    }\n\n    doTransaction() {\n        this.store.moveItem(this.oldItemIndex, this.newItemIndex);\n    }\n    \n    undoTransaction() {\n        this.store.moveItem(this.newItemIndex, this.oldItemIndex);\n    }\n}","import jsTPS_Transaction from \"../common/jsTPS.js\"\n\n/**\n * UpdateItem_Transaction\n * \n * This class represents a transaction that updates the text\n * for a given item. It will be managed by the transaction stack.\n    \n    @author McKilla Gorilla\n */\nexport default class UpdateItem_Transaction extends jsTPS_Transaction {\n    constructor(initStore, initIndex, initOldText, initNewText) {\n        super();\n        this.store = initStore;\n        this.index = initIndex;\n        this.oldText = initOldText;\n        this.newText = initNewText;\n    }\n\n    doTransaction() {\n        this.store.updateItem(this.index, this.newText);\n    }\n    \n    undoTransaction() {\n        this.store.updateItem(this.index, this.oldText);\n    }\n}","import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: payload\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST ITEM\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: payload,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = async function (id, newName) {\n        if (newName!==\"\"){\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                top5List.name = newName;\n                async function updateList(top5List) {\n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                    if (response.data.success) {\n                        async function getListPairs(top5List) {\n                            response = await api.getTop5ListPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        top5List: top5List\n                                    }\n                                });\n                            }  \n                        }\n                        getListPairs(top5List);\n                    }\n                }\n                updateList(top5List);\n            }\n        }\n        else{\n            storeReducer({\n                type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n                payload: false\n            });\n        }\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        \n        tps.clearAllTransactions();\n        history.push(\"/\");\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"Untitled\" + store.newListCounter;\n        let payload = {\n            name: newListName,\n            items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n            ownerEmail: auth.user.email\n        };\n        const response = await api.createTop5List(payload);\n        if (response.data.success) {\n            tps.clearAllTransactions();\n            let newList = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: newList\n            }\n            );\n\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n            history.push(\"/top5list/\" + newList._id);\n        }\n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: pairsArray\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List\n            });\n        }\n    }\n\n    store.deleteList = async function (listToDelete) {\n        let response = await api.deleteTop5ListById(listToDelete._id);\n        if (response.data.success) {\n            store.loadIdNamePairs();\n            history.push(\"/\");\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n        store.unmarkListForDeletion();\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: top5List\n                });\n                history.push(\"/top5list/\" + top5List._id);\n            }\n        }\n    }\n\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n\n    store.addUpdateItemTransaction = function (index, newText) {\n        let oldText = store.currentList.items[index];\n        let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n        tps.addTransaction(transaction);\n    }\n\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n\n    store.updateItem = function (index, newItem) {\n        store.currentList.items[index] = newItem;\n        store.updateCurrentList();\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    store.canUndo = function() {\n        return tps.hasTransactionToUndo();\n    }\n\n    store.canRedo = function() {\n        return tps.hasTransactionToRedo();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: true\n        });\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n    store.setIsItemEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };","import Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal'\nimport Button from '@mui/material/Button';\nimport Alert from '@mui/material/Alert';\nimport { GlobalStoreContext } from '../store'\nimport { useContext } from 'react';\nimport AuthContext from '../auth'\nconst style = {\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    p: 2,\n    px: 4,\n    pb: 3,\n};\nexport default function ErrorModal(){\n    const { store } = useContext(GlobalStoreContext);\n\n\n    const { auth } = useContext(AuthContext);\n\n    return(\n        <Modal\n            open={auth.error}\n            onClose={!auth.error}\n            aria-labelledby=\"modal-modal-title\"\n            aria-describedby=\"modal-modal-description\"\n            style={{display:'flex',alignItems:'center',justifyContent:'center'}}\n        >\n            <Box sx={style}>\n                <Alert severity=\"warning\">{auth.error_message}</Alert>\n                <Button\n                    onClick={auth.handleClose}\n                >\n                    OK, I understand\n                </Button>\n            </Box>\n\n        </Modal>\n    )\n}","import React, { createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\nimport ErrorScreen from '../components/ErrorScreen.js'\nconst AuthContext = createContext();\nconsole.log(\"create AuthContext: \" + AuthContext);\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\nexport const AuthActionType = {\n    GET_LOGGED_IN: \"GET_LOGGED_IN\",\n    REGISTER_USER: \"REGISTER_USER\",\n    LOGIN_USER: \"LOGIN_USER\",\n    LOGOUT_USER: \"LOGOUT_USER\",\n    ERROR_MODAL: \"ERROR_MODAL\"\n}\n\nfunction AuthContextProvider(props) {\n    const [auth, setAuth] = useState({\n        user: null,\n        loggedIn: false,\n        error:false,\n        error_message: \"\"\n    });\n    const history = useHistory();\n\n    useEffect(() => {\n        auth.getLoggedIn();\n    }, []);\n\n    const authReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            case AuthActionType.GET_LOGGED_IN: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: payload.loggedIn,\n                    error:false,\n                    error_message: \"\"\n                });\n            }\n            case AuthActionType.REGISTER_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: true,\n                    error:false,\n                    error_message: \"\"\n                })\n            }\n            case AuthActionType.LOGIN_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: true,\n                    error:false,\n                    error_message: \"\"\n                })\n            }\n            case AuthActionType.LOGOUT_USER:{\n                return setAuth({\n                    user: null,\n                    loggedIn: false,\n                    error:false,\n                    error_message: \"\"\n                })\n            }\n            case AuthActionType.ERROR_MODAL:{\n                return setAuth({\n                    user:null,\n                    loggedIn:false,\n                    error:payload.error,\n                    error_message: payload.msg\n                })\n            }\n\n            default:\n                return auth;\n        }\n    }\n\n    auth.getLoggedIn = async function () {\n        //const response = await api.getLoggedIn();\n        try{\n            const response = await api.getLoggedIn();\n            authReducer({\n                type: AuthActionType.GET_LOGGED_IN,\n                payload: {\n                    loggedIn: response.data.loggedIn,\n                    user: response.data.user\n                }\n            });\n        }\n        catch(err){\n            console.log(\"What happen\");\n        }\n        \n    }\n\n    auth.registerUser = async function(userData, store) {\n        try {\n            const response = await api.registerUser(userData);\n            authReducer({\n                type: AuthActionType.REGISTER_USER,\n                payload: {\n                    user: response.data.user\n                }\n            })\n            history.push(\"/\");\n            store.loadIdNamePairs();\n        }\n        catch(err){\n            console.log(err.response.data.errorMessage);\n            authReducer({\n                type: AuthActionType.ERROR_MODAL,\n                payload: {\n                    error: true,\n                    msg: err.response.data.errorMessage\n                }\n            });\n\n        }\n    }\n\n    auth.loginUser = async function(userData, store) {\n        //const response = await api.loginUser(userData);\n        //console.log(response.data.user);     \n        try {\n            const response = await api.loginUser(userData);\n            authReducer({\n                type: AuthActionType.LOGIN_USER,\n                payload: {\n                    user: response.data.user\n                }\n            })\n            history.push(\"/\");\n            store.loadIdNamePairs();\n        }\n        catch(err){\n            authReducer({\n                type: AuthActionType.ERROR_MODAL,\n                payload: {\n                    error: true,\n                    msg: err.response.data.errorMessage\n                }\n            });\n\n        }\n    }\n\n    auth.logoutUser =async function(){\n        //const response = await api.logoutUser();\n        try{\n            const response = await api.logoutUser();\n            authReducer({\n                type: AuthActionType.LOGOUT_USER,\n            })\n            history.push(\"/\");\n        }\n        catch(err){\n            authReducer({\n                type: AuthActionType.ERROR_MODAL,\n                payload: {\n                    error: true,\n                    msg: err.response.data.errorMessage\n                }\n            });\n\n        }\n    }\n\n    auth.handleClose =async function(){\n        authReducer({\n            type: AuthActionType.ERROR_MODAL,\n            payload: {\n                error: false,\n                msg: \"\"\n            }\n        });\n    }\n    return (\n        <AuthContext.Provider value={{\n            auth\n        }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\nexport default AuthContext;\nexport { AuthContextProvider };","import * as React from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Link from '@mui/material/Link';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { GlobalStoreContext } from '../store/index.js';\nimport { useContext } from 'react'\nimport AuthContext from '../auth'\nimport ErrorScreen from './ErrorScreen'\nfunction Copyright(props) {\n  return (\n    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://mui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst theme = createTheme();\n\nexport default function SignInSide() {\n  const { auth } = useContext(AuthContext);\n  const { store } = useContext(GlobalStoreContext);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const data = new FormData(event.currentTarget);\n    // eslint-disable-next-line no-console\n    // console.log({\n    //   email: data.get('email'),\n    //   password: data.get('password'),\n    // });\n    auth.loginUser({\n      email: data.get('email'),\n      password: data.get('password'),\n  }, store);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Grid container component=\"main\" sx={{ height: '100vh' }}>\n        <CssBaseline />\n        <Grid\n          item\n          xs={false}\n          sm={4}\n          md={7}\n          sx={{\n            backgroundImage: 'url(https://source.unsplash.com/random)',\n            backgroundRepeat: 'no-repeat',\n            backgroundColor: (t) =>\n              t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n          }}\n        />\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n          <Box\n            sx={{\n              my: 8,\n              mx: 4,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n            }}\n          >\n            <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n              Sign in\n            </Typography>\n            <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 1 }}>\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                autoFocus\n              />\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n              />\n              <FormControlLabel\n                control={<Checkbox value=\"remember\" color=\"primary\" />}\n                label=\"Remember me\"\n              />\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n              >\n                Sign In\n              </Button>\n              <Grid container>\n                <Grid item xs>\n                  <Link href=\"#\" variant=\"body2\">\n                    Forgot password?\n                  </Link>\n                </Grid>\n                <Grid item>\n                  <Link href=\"#\" variant=\"body2\">\n                    {\"Don't have an account? Sign Up\"}\n                  </Link>\n                </Grid>\n              </Grid>\n              <Copyright sx={{ mt: 5 }} />\n              <ErrorScreen/>\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n}","import { useContext } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport Button from '@mui/material/Button';\nimport UndoIcon from '@mui/icons-material/Undo';\nimport RedoIcon from '@mui/icons-material/Redo';\nimport CloseIcon from '@mui/icons-material/HighlightOff';\n\n/*\n    This toolbar is a functional React component that\n    manages the undo/redo/close buttons.\n    \n    @author McKilla Gorilla\n*/\nfunction EditToolbar() {\n    const { store } = useContext(GlobalStoreContext);\n\n    function handleUndo() {\n        store.undo();\n    }\n    function handleRedo() {\n        store.redo();\n    }\n    function handleClose() {\n        store.closeCurrentList();\n    }\n\n    let editStatus = false;\n    if (store.isItemEditActive) {\n        editStatus = true;\n    }\n    \n    return (\n        <div id=\"edit-toolbar\">\n            <Button\n                disabled={editStatus || !store.canUndo()}\n                id='undo-button'\n                onClick={handleUndo}\n                variant=\"contained\">\n                    <UndoIcon />\n            </Button>\n            <Button\n                disabled={editStatus || !store.canRedo()}\n                id='redo-button'\n                onClick={handleRedo}\n                variant=\"contained\">\n                    <RedoIcon />\n            </Button>\n            <Button \n                disabled={editStatus}\n                id='close-button'\n                onClick={handleClose}\n                variant=\"contained\">\n                    <CloseIcon />\n            </Button>\n        </div>\n    )\n}\n\nexport default EditToolbar;","import { useContext, useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport AuthContext from '../auth';\nimport { GlobalStoreContext } from '../store'\nimport EditToolbar from './EditToolbar'\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport MenuItem from '@mui/material/MenuItem';\nimport Menu from '@mui/material/Menu';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\n\nexport default function AppBanner() {\n    const { auth } = useContext(AuthContext);\n    const { store } = useContext(GlobalStoreContext);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const isMenuOpen = Boolean(anchorEl);\n\n    const handleProfileMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleLogout = () => {\n        handleMenuClose();\n        auth.logoutUser();\n    }\n\n    const menuId = 'primary-search-account-menu';\n    const loggedOutMenu = (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleMenuClose}><Link to='/login/'>Login in</Link></MenuItem>\n            <MenuItem onClick={handleMenuClose}><Link to='/register/'>Create New Account</Link></MenuItem>\n        </Menu>\n    );\n    const loggedInMenu = \n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleLogout}><Link to='/logout/'>Logout</Link></MenuItem>\n        </Menu>        \n\n    let editToolbar = \"\";\n    let menu = loggedOutMenu;\n    if (auth.loggedIn) {\n        menu = loggedInMenu;\n        if (store.currentList) {\n            editToolbar = <EditToolbar />;\n        }\n    }\n    \n    function getAccountMenu(loggedIn) {\n        if (!loggedIn){\n            return <AccountCircle/>;\n        }\n        else{\n            return auth.user.lastName[0]+auth.user.firstName[0];\n        }\n    }\n\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography                        \n                        variant=\"h4\"\n                        noWrap\n                        component=\"div\"\n                        sx={{ display: { xs: 'none', sm: 'block' } }}                        \n                    >\n                        <Link style={{ textDecoration: 'none', color: 'white' }} to='/'>T<sup>5</sup>L</Link>\n                    </Typography>\n                    <Box sx={{ flexGrow: 1 }}>{editToolbar}</Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <IconButton\n                            size=\"large\"\n                            edge=\"end\"\n                            aria-label=\"account of current user\"\n                            aria-controls={menuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleProfileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            { getAccountMenu(auth.loggedIn) }\n                        </IconButton>\n                    </Box>\n                </Toolbar>\n            </AppBar>\n            {\n                menu\n            }\n        </Box>\n    );\n}","import { useContext } from 'react';\nimport { GlobalStoreContext } from '../store';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal'\nimport Button from '@mui/material/Button';\nimport Alert from '@mui/material/Alert';\nimport AuthContext from '../auth';\n/*\n    This modal is shown when the user asks to delete a list. Note \n    that before this is shown a list has to be marked for deletion,\n    which means its id has to be known so that we can retrieve its\n    information and display its name in this modal. If the user presses\n    confirm, it will be deleted.\n    \n    @author McKilla Gorilla\n*/\nfunction DeleteModal() {\n    const { store } = useContext(GlobalStoreContext);\n    let name = \"\";\n    //console.log(\"22222\");\n    //console.log(store.currentList);\n    if (store.currentList) {\n        //console.log(\"22222\");\n        //console.log(store.currentList);\n        name = store.currentList.name;\n    }\n    function handleDeleteList(event) {\n        //console.log(\"Fuckkkkkkkkkk\");\n        store.deleteMarkedList();\n    }\n    function handleCloseModal(event) {\n        store.unmarkListForDeletion();\n    }\n    const style = {\n        width: 400,\n        bgcolor: 'background.paper',\n        border: '2px solid #000',\n        p: 2,\n        px: 4,\n        pb: 3,\n    };\n    return (\n        <Modal\n            open={store.listMarkedForDeletion!=null}\n            onClose={store.listMarkedForDeletion==null}\n            aria-labelledby=\"modal-modal-title\"\n            aria-describedby=\"modal-modal-description\"\n            style={{display:'flex',alignItems:'center',justifyContent:'center'}}\n        >\n            <Box sx={style}>\n                <Alert severity=\"warning\">Delete the {name} Top 5 List?</Alert>\n                <Button\n                    onClick={handleDeleteList}\n                >\n                    Confirm\n                </Button>\n\n                <Button\n                    onClick={handleCloseModal}\n                >\n                    Cancel\n                </Button>\n            </Box>\n\n        </Modal>\n    );\n}\n\nexport default DeleteModal;","import { useContext, useState } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport IconButton from '@mui/material/IconButton';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport DeleteModal from './DeleteModal.js';\n/*\n    This is a card in our list of top 5 lists. It lets select\n    a list for editing and it has controls for changing its \n    name or deleting it.\n    \n    @author McKilla Gorilla\n*/\nfunction ListCard(props) {\n    const { store } = useContext(GlobalStoreContext);\n    const [editActive, setEditActive] = useState(false);\n    const [text, setText] = useState(\"\");\n    const { idNamePair } = props;\n\n    function handleLoadList(event, id) {\n        if (!event.target.disabled && !cardStatus) {\n            // CHANGE THE CURRENT LIST\n            store.setCurrentList(id);\n        }\n    }\n\n    function handleToggleEdit(event) {\n        event.stopPropagation();\n        toggleEdit();\n    }\n\n    function toggleEdit() {\n        let newActive = !editActive;\n        if (newActive) {\n            store.setIsListNameEditActive();\n        }\n        setEditActive(newActive);\n    }\n\n    async function handleDeleteList(event, id) {\n        event.stopPropagation();\n        store.markListForDeletion(id);\n    }\n\n    function handleKeyPress(event) {\n        if (event.code === \"Enter\") {\n            let id = event.target.id.substring(\"list-\".length);\n            store.changeListName(id, text);\n            toggleEdit();\n        }\n    }\n\n    function handleUpdateText(event) {\n        setText(event.target.value);\n    }\n    \n    let cardStatus = false;\n    if (store.isListNameEditActive) {\n        cardStatus = true;\n    }\n\n    let cardElement =\n        <ListItem\n            id={idNamePair._id}\n            key={idNamePair._id}\n            sx={{ marginTop: '15px', display: 'flex', p: 1 }}\n            button\n            onClick={(event) => {\n                handleLoadList(event, idNamePair._id)\n            }\n            }\n            style={{\n                fontSize: '48pt',\n                width: '100%'\n            }}\n        >\n                <Box sx={{ p: 1, flexGrow: 1 }}>{idNamePair.name}</Box>\n                <Box sx={{ p: 1 }}>\n                    <IconButton onClick={handleToggleEdit} aria-label='edit' disabled={cardStatus}>\n                        <EditIcon style={{fontSize:'48pt'}} />\n                    </IconButton>\n                </Box>\n                <Box sx={{ p: 1 }}>\n                    <IconButton onClick={(event) => {\n                        handleDeleteList(event, idNamePair._id)\n                        //showDeleteModal()\n                    }} aria-label='delete' disabled={cardStatus}>\n                        <DeleteIcon style={{fontSize:'48pt'}} />\n                    </IconButton>\n                </Box>\n        </ListItem>\n\n    if (editActive) {\n        cardElement =\n            <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id={\"list-\" + idNamePair._id}\n                label=\"Top 5 List Name\"\n                name=\"name\"\n                autoComplete=\"Top 5 List Name\"\n                className='list-card'\n                onKeyPress={handleKeyPress}\n                onChange={handleUpdateText}\n                defaultValue={idNamePair.name}\n                inputProps={{style: {fontSize: 48}}}\n                InputLabelProps={{style: {fontSize: 24}}}\n                autoFocus\n            />\n    }\n    return (\n        cardElement\n    );\n}\n\nexport default ListCard;","import React, { useContext, useEffect } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport ListCard from './ListCard.js'\nimport { Fab, Typography } from '@mui/material'\nimport AddIcon from '@mui/icons-material/Add';\nimport List from '@mui/material/List';\nimport DeleteModal from './DeleteModal.js';\n/*\n    This React component lists all the top5 lists in the UI.\n    \n    @author McKilla Gorilla\n*/\nconst HomeScreen = () => {\n    const { store } = useContext(GlobalStoreContext);\n\n    useEffect(() => {\n        store.loadIdNamePairs();\n    }, []);\n\n    function handleCreateNewList() {\n        store.createNewList();\n    }\n    let listCard = \"\";\n    let cardStatus = false;\n    if (store.isListNameEditActive) {\n        cardStatus = true;\n    }\n    if (store) {\n        listCard = \n            <List sx={{ width: '90%', left: '5%', bgcolor: 'background.paper' }}>\n            {\n                store.idNamePairs.map((pair) => (\n                    <ListCard\n                        key={pair._id}\n                        idNamePair={pair}\n                        selected={false}\n                    />\n                ))\n            }\n            </List>;\n    }\n    return (\n        <div id=\"top5-list-selector\">\n            <div id=\"list-selector-heading\">\n            <Fab \n                color=\"primary\" \n                aria-label=\"add\"\n                id=\"add-list-button\"\n                disabled={cardStatus}\n                onClick={handleCreateNewList}\n            >\n                <AddIcon />\n            </Fab>\n                <Typography variant=\"h2\">Your Lists</Typography>\n            </div>\n            <div id=\"list-selector-list\">\n                {\n                    listCard\n                }\n            </div>\n            <DeleteModal/>\n        </div>)\n}\n\nexport default HomeScreen;","export default function SplashScreen() {\n    return (\n        <div id=\"splash-screen\">\n            The Top 5<br />\n            Lister\n        </div>\n    )\n}","import { useContext } from 'react'\nimport HomeScreen from './HomeScreen'\nimport SplashScreen from './SplashScreen'\nimport ErrorScreen from './ErrorScreen'\nimport AuthContext from '../auth'\n\nexport default function HomeWrapper() {\n    const { auth } = useContext(AuthContext);\n    console.log(\"HomeWrapper auth.loggedIn: \" + auth.loggedIn);\n    \n    // if (auth.loggedIn && !auth.error){\n    //     return <HomeScreen />\n    // }\n    // else if (!auth.loggedIn && !auth.error){\n    //     return <SplashScreen />\n    // }\n    // else if (!auth.loggedIn && auth.error){\n    //     console.log(\"oh my god\")\n    //     return <ErrorScreen/>\n    // }\n\n    if (auth.loggedIn){\n        return <HomeScreen />\n    }\n    else {\n        return <SplashScreen />\n    }\n}","import Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\n\nexport default function Copyright(props) {\n    return (\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"/\">\n                The Top 5 Lister\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}","import { useContext } from 'react';\nimport AuthContext from '../auth'\nimport Copyright from './Copyright'\nimport Avatar from '@mui/material/Avatar';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport { GlobalStoreContext } from '../store'\nimport ErrorScreen from './ErrorScreen'\n\nexport default function RegisterScreen() {\n    const { auth } = useContext(AuthContext);\n    const { store } = useContext(GlobalStoreContext)\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        auth.registerUser({\n            firstName: formData.get('firstName'),\n            lastName: formData.get('lastName'),\n            email: formData.get('email'),\n            password: formData.get('password'),\n            passwordVerify: formData.get('passwordVerify')\n        }, store);\n    };\n\n    return (\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n                >\n                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign up\n                    </Typography>\n                    <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    autoComplete=\"fname\"\n                                    name=\"firstName\"\n                                    required\n                                    fullWidth\n                                    id=\"firstName\"\n                                    label=\"First Name\"\n                                    autoFocus\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    id=\"lastName\"\n                                    label=\"Last Name\"\n                                    name=\"lastName\"\n                                    autoComplete=\"lname\"\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label=\"Email Address\"\n                                    name=\"email\"\n                                    autoComplete=\"email\"\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"new-password\"\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    name=\"passwordVerify\"\n                                    label=\"Password Verify\"\n                                    type=\"password\"\n                                    id=\"passwordVerify\"\n                                    autoComplete=\"new-password\"\n                                />\n                            </Grid>\n                        </Grid>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                        >\n                            Sign Up\n                        </Button>\n                        <Grid container justifyContent=\"flex-end\">\n                            <Grid item>\n                                <Link href=\"/login/\" variant=\"body2\">\n                                    Already have an account? Sign in\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Box>\n                <Copyright sx={{ mt: 5 }} />\n                <ErrorScreen/>\n            </Container>\n    );\n}","import { useContext } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport { Typography } from '@mui/material'\n\n/*\n    Our Status bar React component goes at the bottom of our UI.\n    \n    @author McKilla Gorilla\n*/\nfunction Statusbar() {\n    const { store } = useContext(GlobalStoreContext);\n    let text =\"\";\n    if (store.currentList)\n        text = store.currentList.name;\n    return (\n        <div id=\"top5-statusbar\">\n            <Typography variant=\"h4\">{text}</Typography>\n        </div>\n    );\n}\n\nexport default Statusbar;","import { React, useContext, useState } from \"react\";\nimport { GlobalStoreContext } from '../store'\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport IconButton from '@mui/material/IconButton';\nimport EditIcon from '@mui/icons-material/Edit';\n/*\n    This React component represents a single item in our\n    Top 5 List, which can be edited or moved around.\n    \n    @author McKilla Gorilla\n*/\nfunction Top5Item(props) {\n    const { store } = useContext(GlobalStoreContext);\n    const [editActive, setEditActive] = useState(false);\n    const [draggedTo, setDraggedTo] = useState(0);\n    const [text, setText] = useState(\"\");\n\n    function handleDragStart(event, targetId) {\n        event.dataTransfer.setData(\"item\", targetId);\n    }\n\n    function handleDragOver(event) {\n        event.preventDefault();\n    }\n\n    function handleDragEnter(event) {\n        event.preventDefault();\n        console.log(\"entering\");\n        setDraggedTo(true);\n    }\n\n    function handleDragLeave(event) {\n        event.preventDefault();\n        console.log(\"leaving\");\n        setDraggedTo(false);\n    }\n\n    function handleDrop(event, targetId) {\n        event.preventDefault();\n        let sourceId = event.dataTransfer.getData(\"item\");\n        sourceId = sourceId.substring(sourceId.indexOf(\"-\") + 1);\n        setDraggedTo(false);\n\n        console.log(\"handleDrop (sourceId, targetId): ( \" + sourceId + \", \" + targetId + \")\");\n\n        // UPDATE THE LIST\n        store.addMoveItemTransaction(sourceId, targetId);\n    }\n\n    function handleToggleEdit(event) {\n        event.stopPropagation();\n        toggleEdit();\n    }\n\n    function toggleEdit() {\n        let newActive = !editActive;\n        if (newActive) {\n            store.setIsItemEditActive();\n        }\n        setEditActive(newActive);\n    }\n\n    function handleKeyPress(event) {\n        if (event.code === \"Enter\") {\n            store.addUpdateItemTransaction(props.index, event.target.value);\n            toggleEdit();\n        }\n    }\n\n    let editStatus = false;\n    if (store.isItemEditActive) {\n        editStatus = true;\n    }\n\n\n    let {index } = props;\n\n    let itemClass = \"top5-item\";\n    if (draggedTo) {\n        itemClass = \"top5-item-dragged-to\";\n    }\n\n    let ItemElement=\n            <ListItem\n                id={'item-' + (index+1)}\n                key={props.key}\n                className={itemClass}\n                onDragStart={(event) => {\n                    handleDragStart(event, (index+1))\n                }}\n                onDragOver={(event) => {\n                    handleDragOver(event, (index+1))\n                }}\n                onDragEnter={(event) => {\n                    handleDragEnter(event, (index+1))\n                }}\n                onDragLeave={(event) => {\n                    handleDragLeave(event, (index+1))\n                }}\n                onDrop={(event) => {\n                    handleDrop(event, (index+1))\n                }}\n                draggable=\"true\"\n                sx={{ display: 'flex', p: 1 }}\n                style={{\n                    fontSize: '48pt',\n                    width: '100%'\n                }}\n            >\n            <Box sx={{ p: 1 }}>\n                <IconButton onClick={handleToggleEdit} aria-label='edit' disabled={editStatus}>\n                    <EditIcon style={{fontSize:'48pt'}}  />\n                </IconButton>\n            </Box>\n                <Box sx={{ p: 1, flexGrow: 1 }}>{props.text}</Box>\n            </ListItem>\n        \n    if (editActive) {\n        ItemElement =\n            <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id={\"item-\" + text}\n                label=\"Top 5 Item Name\"\n                name=\"name\"\n                autoComplete=\"Top 5 Item Name\"\n                className='top5-item'\n                onKeyPress={handleKeyPress}\n                defaultValue={props.text}\n                inputProps={{style: {fontSize: 48}}}\n                InputLabelProps={{style: {fontSize: 24}}}\n                autoFocus\n            />\n    }\n    return (\n        ItemElement\n    )\n}\n\nexport default Top5Item;","import { useContext, useEffect } from 'react'\nimport Top5Item from './Top5Item.js'\nimport List from '@mui/material/List';\nimport { Typography } from '@mui/material'\nimport { GlobalStoreContext } from '../store/index.js'\nimport AuthContext from '../auth'\n/*\n    This React component lets us edit a loaded list, which only\n    happens when we are on the proper route.\n    \n    @author McKilla Gorilla\n*/\nfunction WorkspaceScreen() {\n    const { store } = useContext(GlobalStoreContext);\n\n    useEffect(() => {\n        console.log(window.location.href.substring(31));\n        store.setCurrentList(window.location.href.substring(31));\n    }, []);\n\n    let editItems = \"\";\n    if (store.currentList) {\n        editItems = \n            <List id=\"edit-items\" sx={{ width: '100%', bgcolor: 'background.paper' }}>\n                {\n                    store.currentList.items.map((item, index) => (\n                        <Top5Item \n                            key={'top5-item-' + (index+1)}\n                            text={item}\n                            index={index} \n                        />\n                    ))\n                }\n            </List>;\n    }\n    return (\n        <div id=\"top5-workspace\">\n            <div id=\"workspace-edit\">\n                <div id=\"edit-numbering\">\n                    <div className=\"item-number\"><Typography variant=\"h3\">1.</Typography></div>\n                    <div className=\"item-number\"><Typography variant=\"h3\">2.</Typography></div>\n                    <div className=\"item-number\"><Typography variant=\"h3\">3.</Typography></div>\n                    <div className=\"item-number\"><Typography variant=\"h3\">4.</Typography></div>\n                    <div className=\"item-number\"><Typography variant=\"h3\">5.</Typography></div>\n                </div>\n                {editItems}\n            </div>\n        </div>\n    )\n}\n\nexport default WorkspaceScreen;","import './App.css';\nimport { React } from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { AuthContextProvider } from './auth';\nimport { GlobalStoreContextProvider } from './store'\nimport SignInSide from './components/SignInSide.js';\nimport {\n    AppBanner,\n    HomeWrapper,\n    RegisterScreen,\n    SplashScreen,\n    Statusbar,\n    WorkspaceScreen,\n} from './components'\n/*\n    This is our application's top-level component.\n    \n    @author McKilla Gorilla\n*/\n/*\n  This is the entry-point for our application. Notice that we\n  inject our store into all the components in our application.\n  \n  @author McKilla Gorilla\n*/\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <AuthContextProvider>\n                <GlobalStoreContextProvider>              \n                    <AppBanner />\n                    <Switch>\n                        <Route path=\"/\" exact component={HomeWrapper} />\n                        <Route path=\"/register/\" exact component={RegisterScreen} />\n                        <Route path=\"/top5list/:id\" exact component={WorkspaceScreen} />\n                        <Route path=\"/login/\" exact component={SignInSide} />\n                        <Route path=\"/logout/\" exact component={SplashScreen}/>\n                    </Switch>\n                    <Statusbar />\n                </GlobalStoreContextProvider>\n            </AuthContextProvider>\n        </BrowserRouter>\n    )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import { AuthContextProvider } from './auth';\nimport reportWebVitals from './reportWebVitals';\n/*\n  This is the entry-point for our application. Notice that we\n  inject our store into all the components in our application.\n  \n  @author McKilla Gorilla\n*/\n/*import { GlobalStoreContext, useGlobalStore } from './store'\nconst AppWrapper = () => {\n  const store = useGlobalStore();\n  return (\n    <GlobalStoreContext.Provider value={store}>\n      <App />\n    </GlobalStoreContext.Provider>\n  )\n}*/\nReactDOM.render(\n  <React.StrictMode>  \n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}